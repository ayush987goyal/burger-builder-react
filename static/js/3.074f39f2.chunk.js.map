{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","shared/utility.js","containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_module_css__WEBPACK_IMPORTED_MODULE_1__","_Input_module_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","updateObject","oldObject","updatedProps","_mnt_mydata_tempDev_react_new_burger_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","checkValidity","rules","isValid","required","trim","minLength","length","maxLength","isEmail","test","isNumeric","Auth","_useStore","useStore","state","auth","loading","error","authRedirectPath","isAuthenticated","token","buildingBurger","burgerBuilder","building","onAuth","useAction","actions","authUser","onSetAuthRedirectPath","setAuthRedirectPath","useEffect","_useState","useState","controls","email","type","placeholder","validation","valid","password","isSignup","_useState2","_mnt_mydata_tempDev_react_new_burger_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","setState","formElementsArray","id","config","form","formElement","react__WEBPACK_IMPORTED_MODULE_3___default","_components_UI_Input_Input__WEBPACK_IMPORTED_MODULE_6__","event","controlName","updatedControls","_mnt_mydata_tempDev_react_new_burger_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__","target","inputChangedHandler","_components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_8__","errorMessage","message","authRedirect","react_router_dom__WEBPACK_IMPORTED_MODULE_5__","to","onSubmit","preventDefault","_components_UI_Button_Button__WEBPACK_IMPORTED_MODULE_7__","btnType","clicked"],"mappings":"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","file":"static/js/3.074f39f2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport classes from './Input.module.css';\r\n\r\nconst input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case('input'):\r\n            inputElement = <input \r\n                className={inputClasses.join(' ')} \r\n                {...props.elementConfig} \r\n                value={props.value}\r\n                onChange={props.changed}/>;\r\n            break;\r\n        case('textarea'):\r\n            inputElement = <textarea \r\n                className={inputClasses.join(' ')} \r\n                {...props.elementConfig} \r\n                value={props.value}\r\n                onChange={props.changed}/>;\r\n            break;\r\n        case('select'):\r\n            inputElement = (\r\n                <select \r\n                    className={inputClasses.join(' ')} \r\n                    value={props.value}\r\n                    onChange={props.changed}>\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option key={option.value} value={option.value}>\r\n                            {option.displayValue}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            );\r\n            break;\r\n        default:\r\n            inputElement = <input \r\n                className={inputClasses.join(' ')} \r\n                {...props.elementConfig} \r\n                value={props.value}\r\n                onChange={props.changed}/>;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3rlVF\",\"Label\":\"Input_Label__Wm2G6\",\"InputElement\":\"Input_InputElement__Dmwji\",\"Invalid\":\"Input_Invalid__4sDgV\"};","export const updateObject = (oldObject, updatedProps) => {\r\n    return {\r\n        ...oldObject,\r\n        ...updatedProps\r\n    };\r\n};\r\n\r\nexport const checkValidity = (value, rules) => {\r\n    let isValid = true;\r\n\r\n    if (!rules) {\r\n        return true;\r\n    }\r\n    \r\n    if (rules.required) {\r\n        isValid = value.trim() !== '' && isValid;\r\n    }\r\n\r\n    if (rules.minLength) {\r\n        isValid = value.length >= rules.minLength && isValid\r\n    }\r\n\r\n    if (rules.maxLength) {\r\n        isValid = value.length <= rules.maxLength && isValid\r\n    }\r\n\r\n    if (rules.isEmail) {\r\n        const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n        isValid = pattern.test(value) && isValid\r\n    }\r\n\r\n    if (rules.isNumeric) {\r\n        const pattern = /^\\d+$/;\r\n        isValid = pattern.test(value) && isValid\r\n    }\r\n\r\n    return isValid;\r\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__uVXkp\"};","import React, { useState, useEffect } from 'react';\r\nimport { useStore, useAction } from 'easy-peasy';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport classes from './Auth.module.css';\r\nimport { updateObject, checkValidity } from '../../shared/utility';\r\n\r\nconst Auth = () => {\r\n  const { loading, error, authRedirectPath } = useStore(state => state.auth);\r\n  const isAuthenticated = useStore(state => state.auth.token !== null);\r\n  const buildingBurger = useStore(state => state.burgerBuilder.building);\r\n\r\n  const onAuth = useAction(actions => actions.auth.authUser);\r\n  const onSetAuthRedirectPath = useAction(actions => actions.auth.setAuthRedirectPath);\r\n\r\n  useEffect(\r\n    () => {\r\n      if (!buildingBurger && authRedirectPath !== '/') {\r\n        onSetAuthRedirectPath();\r\n      }\r\n    },\r\n    [buildingBurger, authRedirectPath]\r\n  );\r\n\r\n  const [state, setState] = useState({\r\n    controls: {\r\n      email: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'email',\r\n          placeholder: 'Mail Address'\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n          isEmail: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      password: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'password',\r\n          placeholder: 'Password'\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n          minLength: 6\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      }\r\n    },\r\n    isSignup: true\r\n  });\r\n\r\n  const inputChangedHandler = (event, controlName) => {\r\n    const updatedControls = updateObject(state.controls, {\r\n      [controlName]: updateObject(state.controls[controlName], {\r\n        value: event.target.value,\r\n        valid: checkValidity(event.target.value, state.controls[controlName].validation),\r\n        touched: true\r\n      })\r\n    });\r\n    setState({ ...state, controls: updatedControls });\r\n  };\r\n\r\n  const submithandler = event => {\r\n    event.preventDefault();\r\n    onAuth({\r\n      email: state.controls.email.value,\r\n      password: state.controls.password.value,\r\n      isSignup: state.isSignup\r\n    });\r\n  };\r\n\r\n  const switchAuthModeHandler = () => {\r\n    setState({ ...state, isSignup: !state.isSignup });\r\n  };\r\n\r\n  const formElementsArray = [];\r\n  for (let key in state.controls) {\r\n    formElementsArray.push({\r\n      id: key,\r\n      config: state.controls[key]\r\n    });\r\n  }\r\n\r\n  let form = formElementsArray.map(formElement => (\r\n    <Input\r\n      key={formElement.id}\r\n      elementType={formElement.config.elementType}\r\n      elementConfig={formElement.config.elementConfig}\r\n      value={formElement.config.value}\r\n      invalid={!formElement.config.valid}\r\n      shouldValidate={formElement.config.validation}\r\n      touched={formElement.config.touched}\r\n      changed={event => inputChangedHandler(event, formElement.id)}\r\n    />\r\n  ));\r\n\r\n  if (loading) {\r\n    form = <Spinner />;\r\n  }\r\n\r\n  let errorMessage = null;\r\n\r\n  if (error) {\r\n    errorMessage = <p>{error.message}</p>;\r\n  }\r\n\r\n  let authRedirect = null;\r\n  if (isAuthenticated) {\r\n    authRedirect = <Redirect to={authRedirectPath} />;\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Auth}>\r\n      {authRedirect}\r\n      {errorMessage}\r\n      <form onSubmit={submithandler}>\r\n        {form}\r\n        <Button btnType=\"Success\">SUBMIT</Button>\r\n      </form>\r\n      <Button clicked={switchAuthModeHandler} btnType=\"Danger\">\r\n        SWITCH TO {state.isSignup ? 'SIGNIN' : 'SIGNUP'}\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n"],"sourceRoot":""}